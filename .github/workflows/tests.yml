name: StegnoX Tests

on:
  push:
    branches: [ main, develop, fix/github-workflow-updates ]
  pull_request:
    branches: [ main, develop ]

env:
  FLASK_ENV: testing
  JWT_SECRET_KEY: github_actions_test_key
  DATABASE_URL: sqlite:///test.db
  PYTHONPATH: ${{ github.workspace }}
  PYTHONUNBUFFERED: 1
  PYTHONWARNINGS: ignore::DeprecationWarning
  PYTHONDONTWRITEBYTECODE: 1

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, '3.10']
      fail-fast: false

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: |
          requirements.txt
          
    - name: Create test directories
      run: |
        mkdir -p tests/data
        mkdir -p storage/temp
        mkdir -p backend/instance
        chmod -R 777 tests/data storage/temp backend/instance || true
    
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-opencv libopencv-dev
        sudo apt-get install -y libsm6 libxext6 libxrender-dev
        sudo apt-get install -y libgl1-mesa-glx
        sudo apt-get install -y sqlite3
    
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install opencv sqlite
    
    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install sqlite
      continue-on-error: true
    
    - name: Upgrade pip and install core dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install urllib3==2.0.7
    
    - name: Install Python dependencies
      run: |
        python -m pip install -r requirements.txt
    
    - name: Initialize test database
      run: |
        python -c "import sqlite3; conn = sqlite3.connect('test.db'); conn.close()"
        python -c "import sqlite3; conn = sqlite3.connect('backend/instance/test.db'); conn.close()"
    
    - name: Run unit tests
      run: |
        pytest tests/ -v -n auto --dist loadfile
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-opencv libopencv-dev
        sudo apt-get install -y libsm6 libxext6 libxrender-dev
        sudo apt-get install -y libgl1-mesa-glx
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install -r requirements.txt
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v -n auto --dist loadfile
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  e2e-test:
    runs-on: ubuntu-latest
    needs: integration-test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-opencv libopencv-dev
        sudo apt-get install -y libsm6 libxext6 libxrender-dev
        sudo apt-get install -y libgl1-mesa-glx
        sudo apt-get install -y google-chrome-stable
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install -r requirements.txt
    
    - name: Run end-to-end tests
      run: |
        pytest tests/e2e/ -v
